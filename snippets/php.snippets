extends html

snippet php "<?php"
<?php

${0}
endsnippet

snippet <?
<?php

${0}
endsnippet

snippet array "array"
$${1:arrayName} = array('${2}' => ${3});${4}
endsnippet

snippet def "def"
define('${1}'${2});${3}
endsnippet

# defined(...)
snippet def? "def?"
${1}defined('${2}')
endsnippet

snippet if "if"
if (${1:/* condition */}) {
    ${2:// code...}
}
endsnippet

snippet eif "eif"
elseif (${1:/* condition */}) {
    ${0}
}
endsnippet

snippet else "else"
else {
    ${1:// code...}
}
endsnippet

snippet ife "if else"
if (${1:/* condition */}) {
    ${2:// code...}
} else {
    ${3:// code...}
}
$0
endsnippet

snippet =?:
	$${1:foo} = ${2:true} ? ${3:a} : ${0};
endsnippet

snippet ?:
	${1:true} ? ${2:a} : ${0}
endsnippet

snippet for "for"
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
    ${4:// code...}
}
endsnippet

snippet foreach "Foreach loop"
foreach ($${1:variable} as $${3:value}) {
    ${VISUAL}${4}
}
$0
endsnippet

snippet foreachk "foreachk"
foreach ($${1:variable} as $${2:key} => $${3:value}){
    ${4:// code...}
}
endsnippet

snippet wh "wh"
while (${1:/* condition */}) {
    ${0}
}
endsnippet

snippet do "do"
do {
    ${2:// code... }
} while (${1:/* condition */});"
endsnippet

snippet switch "switch"
switch ($${1:variable}) {
    case '${2:value}':
        ${3}
        break;
    ${0}
    default:
        ${4}
        break;
}
endsnippet

snippet case "case"
case '${1:value}':
    ${2}
    break;
endsnippet

snippet var "documentad var"
/**
 * @var ${3:int}
 **/
${1:protected }$${2:var};
endsnippet

snippet func "documented function"
/**
 * $2
 * @return ${4:void}
 * @author ${5:`!v g:snips_author`}
 **/
${1:public }function ${2:someFunc}(${3}) {
    ${6}
}
endsnippet

snippet gs "PHP Class Getter Setter" !b
/**
 * @var ${3:int}
 **/
${1:protected }$${2:var};

/*
 * Getter for $2
 * @return $3
 */
public function get${2/\w+\s*/\u$0/}() {
    return $this->$2;
}

/*
 * Setter for $2
 * @return $2
 */
public function set${2/\w+\s*/\u$0/}($$2) {
    $this->$2 = $$2;
    ${4:return $this;}
}
$0
endsnippet

snippet new "New class instance" !b
$$1 = new $1($2);
$0
endsnippet

snippet ns "namespace"
namespace ${1:`!p
abspath = os.path.abspath(path)
m = re.search(r'[A-Z].+(?=/)', abspath)
if m:
    snip.rv = m.group().replace('/', '\\')
`};

endsnippet

snippet class "Class declaration template" !b
/**
 * Class ${3:`!p snip.rv=snip.fn.split('.')[0]`}
 * @author ${2:`!v g:snips_author`}
 */
`!p
m = re.search(r'Abstract', path)
if m:
	snip.rv = 'abstract '
``!p
if re.search(r'Interface', path):
	snip.rv = 'interface'
elif re.search(r'Trait', path):
	snip.rv = 'trait'
else:
	snip.rv = 'class'
` ${3:`!v SnippetFilename()`} {
    public function ${4:__construct}(${5:$options}) {
        ${6:// code}
    }
}
$0
endsnippet

snippet nc "php namespace and class or interface" b
namespace ${1:`!p 
abspath = os.path.abspath(path)
m = re.search(r'[A-Z].+(?=/)', abspath)
if m:
	snip.rv = m.group().replace('/', '\\')
`};

/**
 * Class ${3:`!p snip.rv=snip.fn.split('.')[0]`}
 * @author ${2:`!v g:snips_author`}
 */
`!p
m = re.search(r'Abstract', path)
if m:
	snip.rv = 'abstract '
``!p
if re.search(r'Interface', path):
	snip.rv = 'interface'
elif re.search(r'Trait', path):
	snip.rv = 'trait'
else:
	snip.rv = 'class'
` ${3:`!v SnippetFilename()`} {
    public function ${4:__construct}(${5:$options}) {
        ${6:// code}
    }
	$0
}
endsnippet

#setter
snippet $s
	${1:$foo}->set${2:Bar}(${0});
endsnippet

#getter
snippet $g
	${1:$foo}->get${0:Bar}();
endsnippet

snippet pr "Dumb debug helper in HTML"
echo '<pre>' . var_export($1, 1) . '</pre>';$0
endsnippet

snippet pc "Dumb debug helper in cli"
var_export($1);$0
endsnippet

snippet ret "return"
return ${1:true};
endsnippet

snippet vd "vd"
var_dump(${0});
endsnippet

snippet vdd "vdd"
var_dump(${1}); die(${0:});
endsnippet

snippet inc "inc"
include '${1:file}';${2}
endsnippet

snippet req1 "req1"
require_once '${1:file}';${2}
endsnippet

snippet try "try"
try {
    ${0}
} catch (${1:\Exception} $e) {
}
endsnippet

snippet doc_f
/**
 * ${4:undocumented function}
 *
 * @return ${5:void}
 * @author ${6:`g:snips_author`}
 */
endsnippet

snippet doc_h
/**
 * ${1}
 *
 * @author ${2:`g:snips_author`}
 * @version ${3:$Id$}
 * @copyright ${4:$2}, `strftime('%d %B, %Y')`
 * @package ${0:default}
 */
endsnippet

snippet doc_c
/**
 * Class ${0:`!p snip.rv=snip.fn.split('.')[0]`}
 * @author ${1:`!v g:snips_author`}
 */
endsnippet

# phpunit	
snippet pu_ase
$this->assertEquals(${1:expected}, ${2:actual});
endsnippet

snippet pu_asne
$this->assertNotEquals(${1:expected}, ${2:actual});
endsnippet

snippet pu_asf
$this->assertFalse(${1:Something});
endsnippet

snippet pu_ast
$this->assertTrue(${1:Something});
endsnippet

snippet pu_asfex
$this->assertFileExists(${1:path/to/file});
endsnippet

snippet pu_asfnex
$this->assertFileNotExists(${1:path/to/file});
endsnippet

snippet pu_ascon
$this->assertContains(${1:Search Value}, ${2:Array or Iterator});
endsnippet

snippet pu_ashk
$this->assertArrayHasKey(${1:key}, ${2:array});
endsnippet

snippet pu_asnhk
this->assertArrayNotHasKey(${1:value}, ${2:array});
endsnippet

snippet pu_ascha
$this->assertClassHasAttribute('${1:Attribute Name}', '${2:ClassName}');
endsnippet

snippet pu_asi
$this->assertInstanceOf(${1:expected}, ${2:actual});
endsnippet

snippet pu_tc
public function test${1:name_of_the_test}()
{
	${0:code}
}
endsnippet


# :vim:ft=snippets:

